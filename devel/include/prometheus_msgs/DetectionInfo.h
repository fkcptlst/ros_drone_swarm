// Generated by gencpp from file prometheus_msgs/DetectionInfo.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_DETECTIONINFO_H
#define PROMETHEUS_MSGS_MESSAGE_DETECTIONINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct DetectionInfo_
{
  typedef DetectionInfo_<ContainerAllocator> Type;

  DetectionInfo_()
    : header()
    , object_name()
    , detected(false)
    , frame(0)
    , position()
    , attitude()
    , attitude_q()
    , sight_angle()
    , pixel_position()
    , yaw_error(0.0)
    , category(0)  {
      position.assign(0.0);

      attitude.assign(0.0);

      attitude_q.assign(0.0);

      sight_angle.assign(0.0);

      pixel_position.assign(0);
  }
  DetectionInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , object_name(_alloc)
    , detected(false)
    , frame(0)
    , position()
    , attitude()
    , attitude_q()
    , sight_angle()
    , pixel_position()
    , yaw_error(0.0)
    , category(0)  {
  (void)_alloc;
      position.assign(0.0);

      attitude.assign(0.0);

      attitude_q.assign(0.0);

      sight_angle.assign(0.0);

      pixel_position.assign(0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _object_name_type;
  _object_name_type object_name;

   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef int32_t _frame_type;
  _frame_type frame;

   typedef boost::array<float, 3>  _position_type;
  _position_type position;

   typedef boost::array<float, 3>  _attitude_type;
  _attitude_type attitude;

   typedef boost::array<float, 4>  _attitude_q_type;
  _attitude_q_type attitude_q;

   typedef boost::array<float, 2>  _sight_angle_type;
  _sight_angle_type sight_angle;

   typedef boost::array<int32_t, 2>  _pixel_position_type;
  _pixel_position_type pixel_position;

   typedef float _yaw_error_type;
  _yaw_error_type yaw_error;

   typedef int32_t _category_type;
  _category_type category;





  typedef boost::shared_ptr< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> const> ConstPtr;

}; // struct DetectionInfo_

typedef ::prometheus_msgs::DetectionInfo_<std::allocator<void> > DetectionInfo;

typedef boost::shared_ptr< ::prometheus_msgs::DetectionInfo > DetectionInfoPtr;
typedef boost::shared_ptr< ::prometheus_msgs::DetectionInfo const> DetectionInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::DetectionInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::DetectionInfo_<ContainerAllocator1> & lhs, const ::prometheus_msgs::DetectionInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.object_name == rhs.object_name &&
    lhs.detected == rhs.detected &&
    lhs.frame == rhs.frame &&
    lhs.position == rhs.position &&
    lhs.attitude == rhs.attitude &&
    lhs.attitude_q == rhs.attitude_q &&
    lhs.sight_angle == rhs.sight_angle &&
    lhs.pixel_position == rhs.pixel_position &&
    lhs.yaw_error == rhs.yaw_error &&
    lhs.category == rhs.category;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::DetectionInfo_<ContainerAllocator1> & lhs, const ::prometheus_msgs::DetectionInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "64a1138d8e77ba66759026fce69b90a9";
  }

  static const char* value(const ::prometheus_msgs::DetectionInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x64a1138d8e77ba66ULL;
  static const uint64_t static_value2 = 0x759026fce69b90a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/DetectionInfo";
  }

  static const char* value(const ::prometheus_msgs::DetectionInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 目标类别名称\n"
"string object_name\n"
"\n"
"## 是否检测到目标\n"
"bool detected\n"
"\n"
"## 0表示相机坐标系, 1表示机体坐标系, 2表示惯性坐标系\n"
"int32 frame\n"
"\n"
"## 目标位置[相机系下：右方x为正，下方y为正，前方z为正]\n"
"float32[3] position\n"
"\n"
"## 目标姿态-欧拉角-(z,y,x)\n"
"float32[3] attitude\n"
"\n"
"## 目标姿态-四元数-(qx,qy,qz,qw)\n"
"float32[4] attitude_q\n"
"\n"
"## 视线角度[相机系下：右方x角度为正，下方y角度为正]\n"
"float32[2] sight_angle\n"
"\n"
"## 像素位置[相机系下：右方x为正，下方y为正]\n"
"int32[2] pixel_position\n"
"\n"
"## 偏航角误差\n"
"float32 yaw_error\n"
"\n"
"## 类别\n"
"int32 category\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prometheus_msgs::DetectionInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.object_name);
      stream.next(m.detected);
      stream.next(m.frame);
      stream.next(m.position);
      stream.next(m.attitude);
      stream.next(m.attitude_q);
      stream.next(m.sight_angle);
      stream.next(m.pixel_position);
      stream.next(m.yaw_error);
      stream.next(m.category);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectionInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::DetectionInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::DetectionInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_name);
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "frame: ";
    Printer<int32_t>::stream(s, indent + "  ", v.frame);
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "attitude[]" << std::endl;
    for (size_t i = 0; i < v.attitude.size(); ++i)
    {
      s << indent << "  attitude[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.attitude[i]);
    }
    s << indent << "attitude_q[]" << std::endl;
    for (size_t i = 0; i < v.attitude_q.size(); ++i)
    {
      s << indent << "  attitude_q[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.attitude_q[i]);
    }
    s << indent << "sight_angle[]" << std::endl;
    for (size_t i = 0; i < v.sight_angle.size(); ++i)
    {
      s << indent << "  sight_angle[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.sight_angle[i]);
    }
    s << indent << "pixel_position[]" << std::endl;
    for (size_t i = 0; i < v.pixel_position.size(); ++i)
    {
      s << indent << "  pixel_position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.pixel_position[i]);
    }
    s << indent << "yaw_error: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_error);
    s << indent << "category: ";
    Printer<int32_t>::stream(s, indent + "  ", v.category);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_DETECTIONINFO_H
