// Generated by gencpp from file prometheus_msgs/StatisticiansParchment.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_STATISTICIANSPARCHMENT_H
#define PROMETHEUS_MSGS_MESSAGE_STATISTICIANSPARCHMENT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct StatisticiansParchment_
{
  typedef StatisticiansParchment_<ContainerAllocator> Type;

  StatisticiansParchment_()
    : header()
    , total_functional_uav(0)
    , Sx(0)
    , Sy(0)
    , Sz(0)
    , Sw(0)  {
    }
  StatisticiansParchment_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , total_functional_uav(0)
    , Sx(0)
    , Sy(0)
    , Sz(0)
    , Sw(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int32_t _total_functional_uav_type;
  _total_functional_uav_type total_functional_uav;

   typedef int32_t _Sx_type;
  _Sx_type Sx;

   typedef int32_t _Sy_type;
  _Sy_type Sy;

   typedef int32_t _Sz_type;
  _Sz_type Sz;

   typedef int32_t _Sw_type;
  _Sw_type Sw;





  typedef boost::shared_ptr< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> const> ConstPtr;

}; // struct StatisticiansParchment_

typedef ::prometheus_msgs::StatisticiansParchment_<std::allocator<void> > StatisticiansParchment;

typedef boost::shared_ptr< ::prometheus_msgs::StatisticiansParchment > StatisticiansParchmentPtr;
typedef boost::shared_ptr< ::prometheus_msgs::StatisticiansParchment const> StatisticiansParchmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator1> & lhs, const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.total_functional_uav == rhs.total_functional_uav &&
    lhs.Sx == rhs.Sx &&
    lhs.Sy == rhs.Sy &&
    lhs.Sz == rhs.Sz &&
    lhs.Sw == rhs.Sw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator1> & lhs, const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50df0b7bd2a7cbd006c92bd5f716afd5";
  }

  static const char* value(const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50df0b7bd2a7cbd0ULL;
  static const uint64_t static_value2 = 0x06c92bd5f716afd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/StatisticiansParchment";
  }

  static const char* value(const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#this message is for the statistician node to transmit processed data to the statisticians_scribble node\n"
"std_msgs/Header header\n"
"\n"
"int32 total_functional_uav\n"
"int32 Sx #num of committed to current best\n"
"int32 Sy #committed to prev best\n"
"int32 Sz #polling\n"
"int32 Sw #others\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.total_functional_uav);
      stream.next(m.Sx);
      stream.next(m.Sy);
      stream.next(m.Sz);
      stream.next(m.Sw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StatisticiansParchment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::StatisticiansParchment_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "total_functional_uav: ";
    Printer<int32_t>::stream(s, indent + "  ", v.total_functional_uav);
    s << indent << "Sx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Sx);
    s << indent << "Sy: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Sy);
    s << indent << "Sz: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Sz);
    s << indent << "Sw: ";
    Printer<int32_t>::stream(s, indent + "  ", v.Sw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_STATISTICIANSPARCHMENT_H
