// Generated by gencpp from file prometheus_msgs/Case2Result.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_CASE2RESULT_H
#define PROMETHEUS_MSGS_MESSAGE_CASE2RESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct Case2Result_
{
  typedef Case2Result_<ContainerAllocator> Type;

  Case2Result_()
    : header()
    , detected(false)
    , moving_target(false)
    , enu_position()  {
      enu_position.assign(0.0);
  }
  Case2Result_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , detected(false)
    , moving_target(false)
    , enu_position()  {
  (void)_alloc;
      enu_position.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef uint8_t _moving_target_type;
  _moving_target_type moving_target;

   typedef boost::array<float, 3>  _enu_position_type;
  _enu_position_type enu_position;





  typedef boost::shared_ptr< ::prometheus_msgs::Case2Result_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::Case2Result_<ContainerAllocator> const> ConstPtr;

}; // struct Case2Result_

typedef ::prometheus_msgs::Case2Result_<std::allocator<void> > Case2Result;

typedef boost::shared_ptr< ::prometheus_msgs::Case2Result > Case2ResultPtr;
typedef boost::shared_ptr< ::prometheus_msgs::Case2Result const> Case2ResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::Case2Result_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::Case2Result_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::Case2Result_<ContainerAllocator1> & lhs, const ::prometheus_msgs::Case2Result_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.detected == rhs.detected &&
    lhs.moving_target == rhs.moving_target &&
    lhs.enu_position == rhs.enu_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::Case2Result_<ContainerAllocator1> & lhs, const ::prometheus_msgs::Case2Result_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::Case2Result_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::Case2Result_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::Case2Result_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83bfbb05bea136ea934d7ed5f7e4bc96";
  }

  static const char* value(const ::prometheus_msgs::Case2Result_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83bfbb05bea136eaULL;
  static const uint64_t static_value2 = 0x934d7ed5f7e4bc96ULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/Case2Result";
  }

  static const char* value(const ::prometheus_msgs::Case2Result_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 是否检测到标志位 \n"
"bool detected\n"
"\n"
"bool moving_target\n"
"\n"
"## 目标位置-全局坐标系-(x,y,z)\n"
"float32[3] enu_position\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::prometheus_msgs::Case2Result_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.detected);
      stream.next(m.moving_target);
      stream.next(m.enu_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Case2Result_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::Case2Result_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::Case2Result_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "moving_target: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving_target);
    s << indent << "enu_position[]" << std::endl;
    for (size_t i = 0; i < v.enu_position.size(); ++i)
    {
      s << indent << "  enu_position[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.enu_position[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_CASE2RESULT_H
