// Generated by gencpp from file prometheus_msgs/StationCommand.msg
// DO NOT EDIT!


#ifndef PROMETHEUS_MSGS_MESSAGE_STATIONCOMMAND_H
#define PROMETHEUS_MSGS_MESSAGE_STATIONCOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseStamped.h>
#include <geometry_msgs/PoseStamped.h>

namespace prometheus_msgs
{
template <class ContainerAllocator>
struct StationCommand_
{
  typedef StationCommand_<ContainerAllocator> Type;

  StationCommand_()
    : header()
    , flag(0)
    , first_goal()
    , goal()
    , Command(0)  {
    }
  StationCommand_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , flag(0)
    , first_goal(_alloc)
    , goal(_alloc)
    , Command(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _flag_type;
  _flag_type flag;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _first_goal_type;
  _first_goal_type first_goal;

   typedef  ::geometry_msgs::PoseStamped_<ContainerAllocator>  _goal_type;
  _goal_type goal;

   typedef uint8_t _Command_type;
  _Command_type Command;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(Start)
  #undef Start
#endif
#if defined(_WIN32) && defined(Return)
  #undef Return
#endif
#if defined(_WIN32) && defined(Stop)
  #undef Stop
#endif

  enum {
    Start = 0u,
    Return = 1u,
    Stop = 2u,
  };


  typedef boost::shared_ptr< ::prometheus_msgs::StationCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::prometheus_msgs::StationCommand_<ContainerAllocator> const> ConstPtr;

}; // struct StationCommand_

typedef ::prometheus_msgs::StationCommand_<std::allocator<void> > StationCommand;

typedef boost::shared_ptr< ::prometheus_msgs::StationCommand > StationCommandPtr;
typedef boost::shared_ptr< ::prometheus_msgs::StationCommand const> StationCommandConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::prometheus_msgs::StationCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::prometheus_msgs::StationCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::prometheus_msgs::StationCommand_<ContainerAllocator1> & lhs, const ::prometheus_msgs::StationCommand_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.flag == rhs.flag &&
    lhs.first_goal == rhs.first_goal &&
    lhs.goal == rhs.goal &&
    lhs.Command == rhs.Command;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::prometheus_msgs::StationCommand_<ContainerAllocator1> & lhs, const ::prometheus_msgs::StationCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace prometheus_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::prometheus_msgs::StationCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::prometheus_msgs::StationCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::prometheus_msgs::StationCommand_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a7052f956545dadb066c7cb9787c4c08";
  }

  static const char* value(const ::prometheus_msgs::StationCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa7052f956545dadbULL;
  static const uint64_t static_value2 = 0x066c7cb9787c4c08ULL;
};

template<class ContainerAllocator>
struct DataType< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "prometheus_msgs/StationCommand";
  }

  static const char* value(const ::prometheus_msgs::StationCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"## 启动标志位\n"
"uint8 flag\n"
"\n"
"## 中途点\n"
"geometry_msgs/PoseStamped first_goal\n"
"\n"
"## 目标点\n"
"geometry_msgs/PoseStamped goal\n"
"\n"
"## 控制命令的模式 \n"
"uint8 Command\n"
"# enum Command 控制模式枚举\n"
"uint8 Start=0\n"
"uint8 Return=1\n"
"uint8 Stop=2\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::prometheus_msgs::StationCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.flag);
      stream.next(m.first_goal);
      stream.next(m.goal);
      stream.next(m.Command);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StationCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::prometheus_msgs::StationCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::prometheus_msgs::StationCommand_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.flag);
    s << indent << "first_goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.first_goal);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
    s << indent << "Command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Command);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PROMETHEUS_MSGS_MESSAGE_STATIONCOMMAND_H
